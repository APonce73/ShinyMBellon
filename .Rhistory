mx.states
statesTree <- gvisTreeMap(mx.states, "State", "parent",
"Val", "Val")
statesTree <- gvisTreeMap(mx.states, "State", "parent",
"Val")
my.states$state.area.log=log(my.states$Val)
my.states$Val
mx.states$Val
mx.states$state.area.log=log(mx.states$Val)
statesTree <- gvisTreeMap(mx.states, "State", "parent",
"Val","state.area.log")
mx.states
states <- data.frame(state.name, state.area)
states
total=data.frame(state.area=sum(states$state.area), state.name="USA")
my.states <- rbind(total, states)
my.states
my.states$parent="USA"
my.states
names(Cafe4)[1:2] <- c("State", "Val")
names(Cafe4)
total <- data.frame(Val = sum(Cafe4$Val), State = "MEXICO")
mx.states <- rbind(total, Cafe4)
mx.states$parent <- "MEXICO"
mx.states$parent[mx.states$State=="MEXICO"] <- NA
statesTree <- gvisTreeMap(mx.states, "State", "parent",
"Val","state.area.log")
statesTree <- gvisTreeMap(mx.states, "State", "parent",
"Val","Val")
plot(statesTree)
Tree2 <- gvisTreeMap(Regions,  "State", "parent", "Val", "Val",
options = list(width = 600, height = 500,
fontSize = 16,
minColor = '#EDF8FB',
midColor = '#66C2A4',
maxColor = '#006D2C',
headerHeight = 20,
fontColor = 'black',
showScale = TRUE))
plot(Tree2)
Regions
Tree2 <- gvisTreeMap(Cafe4,  "State", "parent", "Val", "Val",
options = list(width = 600, height = 500,
fontSize = 16,
minColor = '#EDF8FB',
midColor = '#66C2A4',
maxColor = '#006D2C',
headerHeight = 20,
fontColor = 'black',
showScale = TRUE))
plot(Tree2)
Cafe4
Tree2 <- gvisTreeMap(mx.states,  "State", "parent", "Val", "Val",
options = list(width = 600, height = 500,
fontSize = 16,
minColor = '#EDF8FB',
midColor = '#66C2A4',
maxColor = '#006D2C',
headerHeight = 20,
fontColor = 'black',
showScale = TRUE))
plot(Tree2)
Tree2 <- gvisTreeMap(mx.states,  "State", "parent", "Val", "Val",
options = list(width = 600, height = 500,
fontSize = 12,
minColor = '#EDF8FB',
midColor = '#66C2A4',
maxColor = '#006D2C',
headerHeight = 20,
fontColor = 'black',
showScale = TRUE))
plot(Tree2)
Regions
library(mxmaps)
Cafe4
data("df_mxstate")
head(df_mxstate)
df_mxstate$value = Cafe4$Val
Cafe4$Val
Cafe4
head(df_mxstate)
Cafe4.1 <- Cafe4
head(Cafe4.1)
names(Cafe4.1)[1] <- c("state_abbr")
Cafe5 <- merge(df_mxstate, Cafe4,by = state_abbr, all.x = T )
head(df_mxstate)
Cafe5 <- merge(df_mxstate, Cafe4.1, by = state_abbr, all.x = T )
head(Cafe4.1)
names(Cafe4.1)[1] <- c("state_abbr")
head(Cafe4.1)
Cafe5 <- merge(df_mxstate, Cafe4.1, by = state_abbr, all.x = T )
head(Cafe4.1)
Cafe5 <- merge(df_mxstate, Cafe4.1, by = "state_abbr", all.x = T )
Cafe5
Cafe5$Val
Cafe5$Val[is.na(Cafe5$Val)] <- 0
names(Cafe5)
names(Cafe5)[13] <- c("value")
mxhexbin_choropleth(Cafe5, num_colors = 1,
title = "Percentage of the population that self-identifies as Afro-Mexican")
mxhexbin_choropleth(Cafe5, num_colors = 2,
title = "Razas de Maíces")
mxhexbin_choropleth(Cafe5, num_colors = 6,
title = "Razas de Maíces")
mxhexbin_choropleth(Cafe5, num_colors = 6, label_size = 10
title = "Razas de Maíces")
mxhexbin_choropleth(Cafe5, num_colors = 6, label_size = 10,
title = "Razas de Maíces")
mxhexbin_choropleth(Cafe5, num_colors = 6, label_size = 2,
title = "Razas de Maíces")
mxhexbin_choropleth(Cafe5, num_colors = 6, label_size = 4,
title = "Razas de Maíces")
mxhexbin_choropleth(Cafe5, num_colors = 6, label_size = 3,
title = "Razas de Maíces")
scale_fill_viridis()
library(viridis)
scale_fill_viridis()
mxhexbin_choropleth(Cafe5, num_colors = 1, label_size = 3,
title = "Razas de Maíces")
scale_fill_viridis()
mxhexbin_choropleth(Cafe5, num_colors = 1, label_size = 3,
title = "Razas de Maíces")+
scale_fill_viridis()
shiny::runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
TableH <- TableL1
#names(Glenn1.1)
#summary(Glenn1.1$Sistema)
#filter(Municipio == "Totontepec Villa de Morelos Mixe")
attach(TableH)
Glenn2 <- aggregate(Val1 ~ Estado + Municipio , FUN = sum, na.rm = T)
Glenn2
Glenn3 <- aggregate(Val1 ~ Sistema + Género , FUN = sum, na.rm = T)
Glenn4 <- aggregate(Val1 ~ Municipio + Sistema , FUN = sum, na.rm = T)
Glenn5 <- aggregate(Val1 ~ Género + NomSci , FUN = sum, na.rm = T)
#head(Glenn2)
names(Glenn2)[1:3] <- c("origin","visit","Val1")
names(Glenn3)[1:3] <- c("origin","visit","Val1")
names(Glenn4)[1:3] <- c("origin","visit","Val1")
names(Glenn5)[1:3] <- c("origin","visit","Val1")
detach(TableH)
Katcha <- as.data.frame(rbind(Glenn2, Glenn3, Glenn4, Glenn5))
Katcha
rm(Glenn2, Glenn3, Glenn4, Glenn5)
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
shiny::runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
TableL
TableH <- TableL1
#names(Glenn1.1)
#summary(Glenn1.1$Sistema)
#filter(Municipio == "Totontepec Villa de Morelos Mixe")
attach(TableH)
Glenn2 <- aggregate(Val1 ~ Estado + Municipio , FUN = sum, na.rm = T)
#Glenn3 <- aggregate(Val1 ~ Municipio + NomSci , FUN = sum, na.rm = T)
Glenn3 <- aggregate(Val1 ~ Sistema + Género , FUN = sum, na.rm = T)
Glenn4 <- aggregate(Val1 ~ Municipio + Sistema , FUN = sum, na.rm = T)
Glenn5 <- aggregate(Val1 ~ Género + NomSci , FUN = sum, na.rm = T)
#head(Glenn2)
names(Glenn2)[1:3] <- c("origin","visit","Val1")
names(Glenn3)[1:3] <- c("origin","visit","Val1")
names(Glenn4)[1:3] <- c("origin","visit","Val1")
names(Glenn5)[1:3] <- c("origin","visit","Val1")
detach(TableH)
Katcha <- rbind(Glenn2, Glenn3, Glenn4, Glenn5)
Katcha
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
TableP1
head(TableL1)
names(TableP1)
TableL2 <- TableP1[,c(2,3,13,15,14)]
head(TableL2)
library(reshape)
TableL3 <- cast(TableL2, Estado + Sistema + Municipio ~ NomSci)
TableL3 <- cast(TableL2, Estado + Sistema + Municipio ~ NomSci, fun.aggregate = sum)
dim(TableL2)
dim(TableL3)
head(TableL3)
TableL3 <- cast(TableL2, Sistema ~ NomSci, fun.aggregate = sum)
head(TableL3)
head(TableL2)
TableL2 <- list(var = TableP1[,c(2,3,13)], valor = TableP1[,c(15,14)])
head(TableL2)
TablaL2 <- na.omit(TableP1)
TableL2 <- list(var = TableL2[,c(2,3,13)], valor = TableL2[,c(15,14)])
TablaL2
TablaL2 <- na.omit(TableP1)
dim(TableL2)
TableL2 <- na.omit(TableP1)
dim(TableL2)
TableL2 <- list(var = TableL2[,c(2,3,13)], valor = TableL2[,c(15,14)])
head(TableL2)
TableL3 <- data.frame(TableL2$var$Estado, TableL2$valor)
names(TableL3)
names(TableL3)[1] <- c("Variable")
TableL3 <- cast(TableL3, Variable ~ NomSci, fun.aggregate = sum)
dim(TableL3)
TableL3
TableL2$var$Estado
summary(TableL2)
summary(TableP1)
TableL2 <- na.omit(TableP1)
summary(TableL2)
names(TableP1)
TableL2 <- TableP1[,c(2,3,13,15,14)]
summary(TableL2)
TableL2 <- na.omit(TableL2)
summary(TableL2)
head(TableL2)
TableL2 <- list(var = TableL2[,c(1:3)], valor = TableL2[,c(4,5)])
head(TableL2)
names(TableP1)
TableL2 <- TableP1[,c(2,3,5,13,15,14)]
TableL2 <- na.omit(TableL2)
summary(TableL2)
TableL2 <- TableP1[,c(2,3,5,13,15,14)]
summary(TableL2)
TableL2 <- na.omit(TableL2)
TableL2 <- list(var = TableL2[,c(1,2,4)], valor = TableL2[,c(5,6)])
head(TableL2)
summary(TableL2)
TableL3 <- data.frame(TableL2$var$Estado, TableL2$valor)
names(TableL3)[1] <- c("Variable")
TableL3 <- cast(TableL3, Variable ~ NomSci, fun.aggregate = sum)
dim(TableL3)
dim(TableL3)
head(TableL3)
#Rarefraction
RarefraccionCC <- function(Tabla,factor){
require(vegan)
Tabla1 <- data.frame(Tabla, row.names = factor)
raremax <- min(rowSums(Tabla1))
col1 <- seq(1:nrow(Tabla1)) #Para poner color a las lineas
lty1 <- c("solid","dashed","longdash","dotdash")
rarecurve(Tabla1, sample = raremax, col = "black", lty = lty1, cex = 0.6)
#Para calcular el numero de especies de acuerdo a rarefraccion
UUU <- rarefy(Tabla1, raremax)
print(UUU)
}
RarefraccionCC(TableL3[,-1],TableL3[,1])
RenyiCC <- function(Tabla, factor){
require(vegan) #Paquete para la funcion "renyi"
require(ggplot2)#Paquete para hacer la funcion "qplot"
require(reshape)#Paquete para la funcion "melt"
Tabla <- data.frame(Tabla, row.names = factor)
mod <- renyi(Tabla)
vec <- seq(1:11)
mod1 <- data.frame(vec,t(mod))
mod2 <- melt(mod1, id = c("vec"))
mod2
#mod2$variable <- as.numeric(mod2$variable)
orange <- qplot(vec, value, data = mod2, colour = variable, geom = 	"line") + theme_bw()
orange + scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9,10,11), labels = c("0","0.25","0.5","1","2","4","8","16","32","64","Inf"))
}
RenyiCC(TableL3[,-1],TableL3[,1])
names(TableL2$var)
TableL3 <- data.frame(TableL2$var$Sistema, TableL2$valor)
names(TableL3)[1] <- c("Variable")
TableL3 <- cast(TableL3, Variable ~ NomSci, fun.aggregate = sum)
dim(TableL3)
dim(TableL3)
head(TableL3)
RarefraccionCC <- function(Tabla,factor){
require(vegan)
Tabla1 <- data.frame(Tabla, row.names = factor)
raremax <- min(rowSums(decostand(Tabla1,"pa")))
col1 <- seq(1:nrow(Tabla1)) #Para poner color a las lineas
lty1 <- c("solid","dashed","longdash","dotdash")
rarecurve(Tabla1, sample = raremax, col = "black", lty = lty1, cex = 0.6)
#Para calcular el numero de especies de acuerdo a rarefraccion
UUU <- rarefy(Tabla1, raremax)
print(UUU)
}
RarefraccionCC(TableL3[,-1],TableL3[,1])
RenyiCC(TableL3[,-1],TableL3[,1])
TableL3 <- data.frame(TableL2$var$Sistema, TableL2$valor)
names(TableL3)[1] <- c("Variable")
head(TableL3)
Tabla4 <- TableL3 %>%
spread(NomSci)
library(tidyr)
Tabla4 <- TableL3 %>%
spread(NomSci)
head(TableL3)
Tabla4 <- TableL3 %>%
spread(NomSci, Variable)
Tabla4
head(TableP)
shiny::runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
names(TableP1)
head(TableP1)
attach(TableP1)
TablePLL <- aggregate(Val1~NomSci + Especie + Género + Nombre_común, FUN = mean)
detach(TableP1)
head(TablePLL)
write.table(TablePLL, file = "Data_Karla.txt", sep = "\t")
head(TableL1)
TableL10 <- TableL1[TableL1$NomSci == "Citrus sp",]
droplevels(TableL10)
TableL10 <- droplevels(TableL10)
summary(TableL10)
TableL101 <- summary(TableL10)
head(TableL101)
names(TableL101)
TableL101
TableL101$Municipio
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
levels(TableL1$NomSci)
names(TableL1)
TableL1$NomSci
levels(TableL1$NomSci)
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
TableL1
names(TableL1)
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
names(TableL1)
TableL101 <- TableL1[,c(15,4,3, 2, 7, 13, 8)
head(TableL101)
TableL101 <- TableL1[,c(15,4,3, 2, 7, 13, 8)]
head(TableL101)
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
TableL101$NomSci
order(TableL101$NomSci)
TableL101 <- TableL101[order(TableL101$NomSci),]
head(TableL101)
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
library(devtools)
devtools::install_github(c("ramnathv/htmlwidgets", "smartinsightsfromdata/rpivotTable"))
data(mtcars)
mtcars
rpivotTable(mtcars)
library(rpivotTable)
rpivotTable(mtcars)
shiny::runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
head(TableL101)
rpivotTable(TableL101)
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
shiny::runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
search()
detach(TableH)
detach(TableH)
detach(TableH)
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
runApp('Dropbox/JANO/2016/Conabio/Github/shiny_Corredor')
q
q()
shiny::runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
runApp('Dropbox/GitHub/SagarpaShiny')
?sprintf
shiny::runApp('Dropbox/GitHub/ShinyMBellon')
runApp('Dropbox/GitHub/ShinyMBellon')
Municipios <- read.csv("DatosShiny.csv", header = T, sep = "," , dec = ".")
setwd("~/Dropbox/GitHub/ShinyMBellon/")
Municipios <- read.csv("DatosShiny.csv", header = T, sep = "," , dec = ".")
head(Municipios)
Municipios <- read.csv("DatosShiny.csv", header = T, sep = "," , dec = ".")
head(Municipios)
Municipios <- read.delim("DatosShiny.csv", header = T, sep = "," , dec = ".")
head(Municipios)
Municipios <- read.delim("DatosShiny.csv", header = T, sep = "," , dec = ".")
head(Municipios)
runApp()
library("DCluster")
library("jsonlite")
library("RCurl")
library("rgdal")
library("rgeos")
library("ggplot2")
library("ggmap")
library("RColorBrewer")
library("stringr")
library("scales")
library("geojsonio")
library("downloader")
library("spdep")
library("viridis")
library("maptools")
library("rvest")
library("dplyr")
library("stringr")
library("stringi")
library("geojsonio")
library("knitr")
crimes <- fromJSON("https://hoyodecrimen.com/api/v1/crimes")$rows
crimes
kable(crimes, caption = 'List of crimes available from hoyodecrimen.com')
# Note that since the crime we want to graph, 'Homicidio Doloso',
# contains a space we need to encode the URL
homicidio_series <- fromJSON(str_c("https://hoyodecrimen.com",
URLencode("/api/v1/df/crimes/HOMICIDIO DOLOSO/series?start_date=2014-01&end_date=2016-09")))$rows
kable(head(homicidio_series), caption = 'Homicides in CDMX since 2014')
ggplot(homicidio_series, aes(as.Date(str_c(date, "-01")), count)) +
geom_line() +
ggtitle("CDMX - HOMICIDIO DOLOSO") +
xlab("date") +
scale_y_continuous(expand = c(0, 0), limits = c(0, max(homicidio_series$count)))
# create a tempory to save the geojson from the API
tmp_cuadrantes = tempfile("cuads", fileext = ".json")
download("https://hoyodecrimen.com/api/v1/cuadrantes/geojson", tmp_cuadrantes)
# read the geojson into a spatial object
cuadrantes = readOGR(tmp_cuadrantes, "OGRGeoJSON", verbose = FALSE)
tmp_sectores = tempfile("secs", fileext = ".json")
download("https://hoyodecrimen.com/api/v1/sectores/geojson", tmp_sectores)
sectores = readOGR(tmp_sectores, "OGRGeoJSON", verbose = FALSE)
plot(cuadrantes, main = "cuadrantes")
plot(sectores, main = "sectores")
example(columbus)
head(columbus)
class(columbus)
coords <- coordinates(columbus)
col.knn <- knearneigh(coords, k=1)
plot(columbus, border="grey")
plot(knn2nb(col.knn), coords, add=TRUE)
col.knn <- knearneigh(coords, k=3)
plot(columbus, border="grey")
plot(knn2nb(col.knn), coords, add=TRUE)
